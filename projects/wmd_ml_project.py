# -*- coding: utf-8 -*-
"""wmd_ml_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c2dF5LogAPkF4ci998rG_baJwOdxCU2h
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import pandas_profiling

# Input data files are available in the "../input/" directory.
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# Any results you write to the current directory are saved as output.

# Commented out IPython magic to ensure Python compatibility.
import geopandas
import seaborn as sns
sns.set()
import matplotlib.pyplot as plt
# %matplotlib inline

"""![bnb](https://img4.cityrealty.com/neo/i/p/mig/airbnb_guide.jpg)

![new york](https://www.worldatlas.com/upload/c6/23/73/shutterstock-152208935.jpg)
"""

#Shape of dataframe
df.shape

#describing all the columns in our dataset
df.columns

#by default head shows us top 5 records
df.head()

"""**Finding Outliers**

For 1 particular column

> > > This type of graph is used to show the shape of the distribution, its central value, and its variability.
> >
> > > It is especially useful for indicating whether a distribution is skewed and whether there are potential unusual observations (outliers) in the data set.
"""

plt.figure(figsize=(16, 6))
sns.boxplot(x="neighbourhood_group", y="price", data=df)

"""> > > The graph above is depicting outliers for different neighbourhood groups.

> >  Outliers can be defined as an observation that lies an abnormal distance from other values in a random sample from a population.

** Plot showing top 10 neighbourhoods with highest hotel prices.**
"""

#method1
plt.figure(figsize=(16, 6))
sns.scatterplot(x="neighbourhood", y="price", data=df.sort_values('price', ascending=False).head(10))

#method2
plt.figure(figsize =(18,7))
sns.barplot(x="neighbourhood", y="price", data=df.nlargest(10,['price']))

"""** Neighbourhood’s average price so that I am able to pick an economical location to book my hotel.**"""

print ("Total Neighbourhoods: ", len(np.unique(df.neighbourhood)))

#using groupby to group two columns neighbourhood and price also find mean of price along with sorting the values and resetting index
df_top_prices_by_neighbourhood = df.groupby('neighbourhood').agg({'price': 'mean'}).sort_values('price').reset_index()

#showing columns in dataframe
df_top_prices_by_neighbourhood.columns

plt.figure(figsize=(25, 10))
sns.barplot(x="neighbourhood", y="price", data=df_top_prices_by_neighbourhood.head(20))

"""**10 most popular hosts based on number_of_reviews**"""

df_host_popularity = df.groupby('host_id').agg({'number_of_reviews': 'sum'})

#finding total_reviews
total_reviews = df.number_of_reviews.sum()
total_reviews

df_host_popularity['popularity_index'] = df_host_popularity['number_of_reviews']. \
                                                apply(lambda x: x/float(total_reviews)*100)

#sorting and showing top 10 values
df_host_popularity.sort_values('popularity_index', ascending=False).head(10)

df_host_popularity = df_host_popularity.reset_index()
#deleting number_of_reviews column
del df_host_popularity['number_of_reviews']

df_host_popularity.head(10)

#merging dataframes
df = pd.merge(df, df_host_popularity)

df.head()

"""**Top locations where people tend to stay for a longer duration (more than a week) and sorted by their popularity index**"""

#df[df.minimum_nights > 7].sort_values('popularity_index', ascending=False).head(20)['neighbourhood']
p_inde_filtered = df.filter(["neighbourhood","minimum_nights",'popularity_index'])
new = p_inde_filtered.query('minimum_nights>7')
new1 = new.sort_values('popularity_index', ascending=False).head(20)
new1['neighbourhood']

"""**The most popular regions based on the host_id’s popularity_index**

"""

df_popular_regions = df.groupby('neighbourhood').agg({'popularity_index': 'sum'}).reset_index()

plt.figure(figsize=(18, 7))
sns.barplot(x='neighbourhood', y='popularity_index', data=df_popular_regions.sort_values('popularity_index',
                                                                                        ascending=False).head(10))

"""**Which neighbourhood is generating maximum and minimum revenues in terms of private rooms,shared rooms and entire homes?**"""

df_n_roomtype = df.groupby(['neighbourhood','room_type']).agg({'price':'sum'})
df_n_roomtype

df_n_roomtype = pd.pivot_table(df_n_roomtype, values='price', index=['neighbourhood'], columns=['room_type'])

#Maximum revenue in Private Rooms
df_n_roomtype.sort_values('Private room', ascending = False).head(1)

#Minimum revenue in Private Rooms
df_n_roomtype.sort_values('Private room', ascending = True).head(1)

#Maximum revenue in Entire home/apt
df_n_roomtype.sort_values('Entire home/apt', ascending = False).head(1)

#Minimum revenue in Entire home/apt
df_n_roomtype.sort_values('Entire home/apt', ascending = True).head(1)

#Maximum revenue in Shared room
df_n_roomtype.sort_values('Shared room', ascending = False).head(1)

#Minimum revenue in Shared room
df_n_roomtype.sort_values('Shared room', ascending = True).head(1)

"""**The average price income for private rooms,shared rooms and entire homes for each of the neighbourhoods is shown below.**"""

df_neighbourhood_room_type_mean = df.groupby(['neighbourhood', 'room_type']) \
                                                .agg({'price': 'mean'}).reset_index()

#renaming a column
df_neighbourhood_room_type_mean = df_neighbourhood_room_type_mean.rename(columns = {'price': 'average_region_price'})
#creating a pivot table
df_neighbourhood_room_type_mean_pivot = pd.pivot_table(df_neighbourhood_room_type_mean, values='average_region_price',
                           index=['neighbourhood'], columns=['room_type'])

#Plotting
import matplotlib.pyplot as plt
ax=df_neighbourhood_room_type_mean_pivot.sort_values('Private room', ascending=False).head().plot(kind='bar', width = 0.5)
ax.set_xlabel('neighbourhood', fontsize = 20)
ax.set_ylabel('average_price', fontsize = 20)
labels=list(df_neighbourhood_room_type_mean_pivot.sort_values('Private room', ascending=False).index[:5])
ax.set_xticklabels(rotation=30,labels=labels,fontsize=10)
plt.show()
# fig_size = plt.rcParams["figure.figsize"]
# plt.figure(figsize=(20,10))
# #fig_size[0] = 20
# #fig_size[1] = 10
# #ax = plt.gca()
# for tick in ax.xaxis.get_major_ticks():
#     tick.label.set_fontsize(20)
#     tick.label.set_rotation('horizontal')
# for tick in ax.yaxis.get_major_ticks():
#     tick.label.set_fontsize(16)
# # plt.rcParams["figure.figsize"] = fig_size
# plt.legend(prop={'size':'15'})
# plt.show(ax)

"""> > > The pivot table takes simple column-wise data as input, and groups the entries into a two-dimensional table that provides a multidimensional summarization of the data.

**Host_id’s popularity in its neighbourhood**
"""

df_neighbourhood_sum = df.groupby('neighbourhood').agg({'number_of_reviews': 'sum'}).reset_index()

df_neighbourhood_host_sum = df.groupby(['host_id', 'neighbourhood']).agg({'number_of_reviews': 'sum'}).reset_index()

#renaming columns
df_neighbourhood_sum = df_neighbourhood_sum.rename(columns = {'number_of_reviews': 'sum_of_reviews'})

#merging
df_neighbourhood_host_merged = pd.merge(df_neighbourhood_host_sum, df_neighbourhood_sum)

df_neighbourhood_host_merged.head()

df_neighbourhood_host_merged['host_neighbourhood_popularity'] = df_neighbourhood_host_merged.apply(lambda x: x['number_of_reviews']/float(x['sum_of_reviews'])*100 \
                                       if x['sum_of_reviews'] != 0 else 0,
                                                                   axis=1)

df_neighbourhood_host_merged.sort_values('host_neighbourhood_popularity', ascending=False).head()

#deleting columns
del df_neighbourhood_host_merged['sum_of_reviews']
del df_neighbourhood_host_merged['number_of_reviews']

df_neighbourhood_host_merged[df_neighbourhood_host_merged['neighbourhood'] == 'Baychester']

df = pd.merge(df, df_neighbourhood_host_merged)

df[df.host_neighbourhood_popularity > 90] \
[['host_id', 'host_name', 'neighbourhood', 'neighbourhood_group', 'host_neighbourhood_popularity']]

"""**Average price income for private rooms and entire homes for each of the neighbourhoods?**"""

df_neighbourhood_room_type_mean = df[df['room_type'] != 'Shared room'].groupby(['neighbourhood', 'room_type']) \
                                                .agg({'price': 'mean'}).reset_index()

df_neighbourhood_room_type_mean = df_neighbourhood_room_type_mean.rename(columns = {'price': 'average_region_price'})

df = pd.merge(df, df_neighbourhood_room_type_mean)

df[df['neighbourhood'] == 'Baychester']

df_neighbourhood_room_type_mean_pivot = pd.pivot_table(df_neighbourhood_room_type_mean, values='average_region_price',
                           index=['neighbourhood'], columns=['room_type'])

#Plotting


import matplotlib.pyplot as plt
ax=df_neighbourhood_room_type_mean_pivot.sort_values('Private room', ascending=False).head().plot(kind='bar', width = 0.5)
ax.set_xlabel('neighbourhood', fontsize = 20)
ax.set_ylabel('average_price', fontsize = 20)
labels=list(df_neighbourhood_room_type_mean_pivot.sort_values('Private room', ascending=False).index[:5])
ax.set_xticklabels(rotation=30,labels=labels,fontsize=10)
plt.show()

"""**Relative price difference of that host with respect to the neighbourhood’s average pricing**"""

df['region_price_margin'] = df.apply(lambda x: ((x['price'] - x['average_region_price'])/x['price'])*100 if x['price'] != 0 else 0, axis=1)

df.head()